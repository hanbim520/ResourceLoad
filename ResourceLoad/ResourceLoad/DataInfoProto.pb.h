// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataInfoProto.proto

#ifndef PROTOBUF_DataInfoProto_2eproto__INCLUDED
#define PROTOBUF_DataInfoProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace JxSDK {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataInfoProto_2eproto();
void protobuf_AssignDesc_DataInfoProto_2eproto();
void protobuf_ShutdownFile_DataInfoProto_2eproto();

class DataInfo;

// ===================================================================

class DataInfo : public ::google::protobuf::Message {
 public:
  DataInfo();
  virtual ~DataInfo();

  DataInfo(const DataInfo& from);

  inline DataInfo& operator=(const DataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataInfo& default_instance();

  void Swap(DataInfo* other);

  // implements Message ----------------------------------------------

  DataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataInfo& from);
  void MergeFrom(const DataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required uint32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // required bytes MapStr = 4;
  inline bool has_mapstr() const;
  inline void clear_mapstr();
  static const int kMapStrFieldNumber = 4;
  inline const ::std::string& mapstr() const;
  inline void set_mapstr(const ::std::string& value);
  inline void set_mapstr(const char* value);
  inline void set_mapstr(const void* value, size_t size);
  inline ::std::string* mutable_mapstr();
  inline ::std::string* release_mapstr();
  inline void set_allocated_mapstr(::std::string* mapstr);

  // @@protoc_insertion_point(class_scope:JxSDK.DataInfo)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_mapstr();
  inline void clear_has_mapstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::std::string* mapstr_;
  ::google::protobuf::uint32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DataInfoProto_2eproto();
  friend void protobuf_AssignDesc_DataInfoProto_2eproto();
  friend void protobuf_ShutdownFile_DataInfoProto_2eproto();

  void InitAsDefaultInstance();
  static DataInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DataInfo

// required uint32 width = 1;
inline bool DataInfo::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataInfo::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 DataInfo::width() const {
  return width_;
}
inline void DataInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 2;
inline bool DataInfo::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataInfo::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 DataInfo::height() const {
  return height_;
}
inline void DataInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required uint32 size = 3;
inline bool DataInfo::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataInfo::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 DataInfo::size() const {
  return size_;
}
inline void DataInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// required bytes MapStr = 4;
inline bool DataInfo::has_mapstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataInfo::set_has_mapstr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataInfo::clear_has_mapstr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataInfo::clear_mapstr() {
  if (mapstr_ != &::google::protobuf::internal::kEmptyString) {
    mapstr_->clear();
  }
  clear_has_mapstr();
}
inline const ::std::string& DataInfo::mapstr() const {
  return *mapstr_;
}
inline void DataInfo::set_mapstr(const ::std::string& value) {
  set_has_mapstr();
  if (mapstr_ == &::google::protobuf::internal::kEmptyString) {
    mapstr_ = new ::std::string;
  }
  mapstr_->assign(value);
}
inline void DataInfo::set_mapstr(const char* value) {
  set_has_mapstr();
  if (mapstr_ == &::google::protobuf::internal::kEmptyString) {
    mapstr_ = new ::std::string;
  }
  mapstr_->assign(value);
}
inline void DataInfo::set_mapstr(const void* value, size_t size) {
  set_has_mapstr();
  if (mapstr_ == &::google::protobuf::internal::kEmptyString) {
    mapstr_ = new ::std::string;
  }
  mapstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataInfo::mutable_mapstr() {
  set_has_mapstr();
  if (mapstr_ == &::google::protobuf::internal::kEmptyString) {
    mapstr_ = new ::std::string;
  }
  return mapstr_;
}
inline ::std::string* DataInfo::release_mapstr() {
  clear_has_mapstr();
  if (mapstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mapstr_;
    mapstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataInfo::set_allocated_mapstr(::std::string* mapstr) {
  if (mapstr_ != &::google::protobuf::internal::kEmptyString) {
    delete mapstr_;
  }
  if (mapstr) {
    set_has_mapstr();
    mapstr_ = mapstr;
  } else {
    clear_has_mapstr();
    mapstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace JxSDK

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataInfoProto_2eproto__INCLUDED
